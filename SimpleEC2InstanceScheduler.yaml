AWSTemplateFormatVersion: '2010-09-09'
Description: Simple EC2 Instance Scheduler
Parameters: 
  TagName: 
    Description: Enter a name for the tag to use to identify instances that will be schedule for start/stop.
    Type: String
    Default: scheduled
  TagValue:
    Description: Enter value for the tag.
    Type: String
    Default: true

Resources:
  LambdaFunctionStop:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt RoleStop.Arn
      Handler: index.lambda_handler
      Timeout: 10
      Description: "Lambda function"
      FunctionName:
        Fn::Join:
          - '-'
          - - Simple_EC2_Instance_Scheduler_Stop
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      Environment:
         Variables:
          tag_name: !Sub
            - 'tag:${TagName}'
            - TagName: !Ref TagName
          tag_value: !Ref TagValue
      Code:  
        ZipFile: |        
          import boto3
          from os import environ
          def lambda_handler(event, context):
              client = boto3.client('ec2')
      
              tag_name = environ['tag_name']
              tag_value = environ['tag_value']
              #You can modify the name and value of the tag to be used in the environment variables.

              response = client.describe_instances(
              Filters=[
                  {'Name': tag_name, 'Values': [tag_value]},
                  {'Name': 'instance-state-name', 'Values': ['running']},
                  ],
              ).get("Reservations")
              ec2list=[]
              for reservation in response:
                  for instance in reservation['Instances']:
                      ec2instance=instance.get("InstanceId")
                      ec2list.append(ec2instance)
              print("Found instances: " + ec2list)
              try:
                  start = client.stop_instances(InstanceIds=ec2list)
                  print("Stoping instances: " + ec2list)
              except:
                  print("There are no instances to stop.")

  LambdaFunctionStart:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt RoleStart.Arn
      Handler: index.lambda_handler
      Timeout: 10
      Description: "Lambda function"
      FunctionName: 
        Fn::Join:
          - '-'
          - - Simple_EC2_Instance_Scheduler_Start
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      Environment:
         Variables:
          tag_name: !Sub
            - 'tag:${TagName}'
            - TagName: !Ref TagName
          tag_value: !Ref TagValue
      Code:  
        ZipFile: |        
          import boto3
          from os import environ
          def lambda_handler(event, context):
              client = boto3.client('ec2')
      
              tag_name = environ['tag_name']
              tag_value = environ['tag_value']
              #You can modify the name and value of the tag to be used in the environment variables.
              
              response = client.describe_instances(
              Filters=[
                  {'Name': tag_name, 'Values': [tag_value]},
                  {'Name': 'instance-state-name', 'Values': ['stopped']},
                  ],
              ).get("Reservations")
              ec2list=[]
              for reservation in response:
                  for instance in reservation['Instances']:
                      ec2instance=instance.get("InstanceId")
                      ec2list.append(ec2instance)
              print("Found instances: " + ec2list)
              try:
                  start = client.start_instances(InstanceIds=ec2list)
                  print("Starting instances: " + ec2list)
              except:
                  print("There are no instances to start.")

  LambdaFunctionLogsStop:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: 
          Fn::Join:
          - '-'
          - - /aws/lambda/Simple_EC2_Instance_Scheduler_Stop
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
  LambdaFunctionLogsStart:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: "/aws/lambda/Simple_EC2_Instance_Scheduler_Start"
        LogGroupName: 
          Fn::Join:
          - '-'
          - - /aws/lambda/Simple_EC2_Instance_Scheduler_Start
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
  ScheduledRuleStop: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled Rule to stop tagged instances every week day at 20:00 (CDT)"
      ScheduleExpression: "cron(00 01 ? * TUE-SAT *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunctionStop"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambdaStop: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunctionStop"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRuleStop"
          - "Arn"

  ScheduledRuleStart: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled Rule to start tagged instances every week day at 08:00 AM (CDT)"
      ScheduleExpression: "cron(00 13 ? * MON-FRI *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunctionStart"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambdaStart: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunctionStart"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRuleStart"
          - "Arn"

  RoleStart:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Simple_EC2_Instance_scheduler_Start_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Simple_EC2_Instance_scheduler_Start_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: !GetAtt LambdaFunctionLogsStart.Arn
              - Effect: Allow
                Action:
                - "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                - "ec2:StartInstances"
                Resource: 
                  Fn::Sub: "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
  RoleStop:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Simple_EC2_Instance_scheduler_Stop_role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Simple_EC2_Instance_scheduler_Stop_Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: !GetAtt LambdaFunctionLogsStop.Arn
              - Effect: Allow
                Action:
                - "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action:
                - "ec2:StopInstances"
                Resource: 
                  Fn::Sub: "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
Outputs:
  EventBridgeRuleStart:
    Description: Executes Lambda function to start instances every day from Monday to Friday at 08:00 AM (CDT)
    Value: !Ref ScheduledRuleStart
  EventBridgeRuleStop:
    Description: Executes Lambda function to stop instances every day from Monday to Friday at 20:00 (CDT)
    Value: !Ref ScheduledRuleStop
  TagName:
    Description: Tag name that identifies instances which will be scheduled for start/stop.
    Value: !Ref TagName
  TagValue:
    Description: Tag value
    Value: !Ref TagValue