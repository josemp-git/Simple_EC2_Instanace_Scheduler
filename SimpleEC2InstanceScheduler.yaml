AWSTemplateFormatVersion: '2010-09-09'
Description: Simple EC2 Instance Scheduler
Parameters: 
  TagKey: 
    Description: Enter a name for the tag used to identify the instances that will be scheduled for start/stop.
    Type: String
    Default: scheduled
  TagValue:
    Description: Enter value for the tag used to identify the instances that will be scheduled for start/stop.
    Type: String
    Default: true
  StartTime:
    Description: ENABLE the scheduled automatic START of tagged Amazon EC2 instances. Default time is Monday to Friday at 08:00 AM (CST). 
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
  StopTime:
    Description: ENABLE the scheduled automatic STOP of tagged Amazon EC2 instances. Default time is Monday to Friday at 08:00 PM (CST). 
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
    
Conditions:
  StopTimeCondition: !Equals [!Ref StopTime, "Yes"]
  StartTimeCondition: !Equals [!Ref StartTime, "Yes"]

Resources:
  LambdaFunctionStop:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt RoleStop.Arn
      Handler: index.lambda_handler
      Timeout: 10
      Description: "Lambda function"
      FunctionName:
        Fn::Join:
          - '-'
          - - Simple_EC2_Instance_Scheduler_Stop
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      Environment:
         Variables:
          tag_key: !Sub
            - 'tag:${TagKey}'
            - TagKey: !Ref TagKey
          tag_value: !Ref TagValue
      Code:  
        ZipFile: |        
          import boto3
          from os import environ
          def lambda_handler(event, context):
              client = boto3.client('ec2')

              tag_key = environ['tag_key']
              tag_value = environ['tag_value']
              #You can modify the name and value of the tag to be used in the environment variables.

              response = client.describe_instances(
              Filters=[
                  {'Name': tag_key, 'Values': [tag_value]},
                  {'Name': 'instance-state-name', 'Values': ['running']},
                  ],
              ).get("Reservations")
              ec2list=[]
              for reservation in response:
                  for instance in reservation['Instances']:
                      ec2instance=instance.get("InstanceId")
                      ec2list.append(ec2instance)
              print("Found instances: " + str(ec2list))
              try:
                  start = client.stop_instances(InstanceIds=ec2list)
                  print("Stopping instances: " + str(ec2list))
              except:
                  print("There are no instances to stop.")

  LambdaFunctionStart:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt RoleStart.Arn
      Handler: index.lambda_handler
      Timeout: 10
      Description: "Lambda function"
      FunctionName: 
        Fn::Join:
          - '-'
          - - Simple_EC2_Instance_Scheduler_Start
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
      Environment:
         Variables:
          tag_key: !Sub
            - 'tag:${TagKey}'
            - TagKey: !Ref TagKey
          tag_value: !Ref TagValue
      Code:  
        ZipFile: |        
          import boto3
          from os import environ
          def lambda_handler(event, context):
              client = boto3.client('ec2')
      
              tag_key = environ['tag_key']
              tag_value = environ['tag_value']
              #You can modify the name and value of the tag to be used in the environment variables.
              
              response = client.describe_instances(
              Filters=[
                  {'Name': tag_key, 'Values': [tag_value]},
                  {'Name': 'instance-state-name', 'Values': ['stopped']},
                  ],
              ).get("Reservations")
              ec2list=[]
              for reservation in response:
                  for instance in reservation['Instances']:
                      ec2instance=instance.get("InstanceId")
                      ec2list.append(ec2instance)
              print("Found instances: " + str(ec2list))
              try:
                  start = client.start_instances(InstanceIds=ec2list)
                  print("Starting instances: " + str(ec2list))
              except:
                  print("There are no instances to start.")

  LambdaFunctionLogsStop:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: 
          Fn::Join:
          - '-'
          - - /aws/lambda/Simple_EC2_Instance_Scheduler_Stop
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId
                            
  LambdaFunctionLogsStart:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: "/aws/lambda/Simple_EC2_Instance_Scheduler_Start"
        LogGroupName: 
          Fn::Join:
          - '-'
          - - /aws/lambda/Simple_EC2_Instance_Scheduler_Start
            - Fn::Select:
                - 4
                - Fn::Split:
                    - '-'
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - /
                            - Ref: AWS::StackId

  ScheduledRuleStop: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled Rule to stop tagged instances every week day at 20:00 (CST)"
      ScheduleExpression: "cron(00 02 ? * TUE-SAT *)"
      State: !If [StopTimeCondition, "ENABLED", "DISABLED"]
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunctionStop"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambdaStop: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunctionStop"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRuleStop"
          - "Arn"

  ScheduledRuleStart: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Scheduled Rule to start tagged instances every week day at 08:00 AM (CST)"
      ScheduleExpression: "cron(00 14 ? * MON-FRI *)"
      State: !If [StartTimeCondition, "ENABLED", "DISABLED"]
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunctionStart"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambdaStart: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunctionStart"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRuleStart"
          - "Arn"

  RoleStart:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 
            Fn::Join:
              - '-'
              - - Simple_EC2_Instance_scheduler_Start_Policy
                - Fn::Select:
                    - 4
                    - Fn::Split:
                        - '-'
                        - Fn::Select:
                            - 2
                            - Fn::Split:
                                - /
                                - Ref: AWS::StackId
          PolicyDocument:
            Fn::Sub:
              - |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "${LambdaFunctionLogsStart}",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "ec2:DescribeInstances",
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "ec2:StartInstances",
                            "Resource": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*",
                            "Condition": {
                                "StringEquals": {
                                    "ec2:ResourceTag/${TagKey}": "${TagValue}"
                                }
                            },
                            "Effect": "Allow"
                        }
                    ]
                  }
              -
                TagKey: !Sub
                  - '${TagKey}'
                  - TagKey: !Ref TagKey
                TagValue: !Sub
                  - '${TagValue}'
                  - TagValue: !Ref TagValue
                LambdaFunctionLogsStart: !GetAtt LambdaFunctionLogsStart.Arn
                Region: !Sub ${AWS::Region}
                AccountId: !Sub ${AWS::AccountId}

  RoleStop:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName:
            Fn::Join:
                  - '-'
                  - - Simple_EC2_Instance_scheduler_Stop_Policy
                    - Fn::Select:
                        - 4
                        - Fn::Split:
                            - '-'
                            - Fn::Select:
                                - 2
                                - Fn::Split:
                                    - /
                                    - Ref: AWS::StackId
          PolicyDocument:
            Fn::Sub:
              - |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "${LambdaFunctionLogsStop}",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "ec2:DescribeInstances",
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": "ec2:StopInstances",
                            "Resource": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*",
                            "Condition": {
                                "StringEquals": {
                                    "ec2:ResourceTag/${TagKey}": "${TagValue}"
                                }
                            },
                            "Effect": "Allow"
                        }
                    ]
                  }
              -
                TagKey: !Sub
                  - '${TagKey}'
                  - TagKey: !Ref TagKey
                TagValue: !Sub
                  - '${TagValue}'
                  - TagValue: !Ref TagValue    
                LambdaFunctionLogsStop: !GetAtt LambdaFunctionLogsStop.Arn
                Region: !Sub ${AWS::Region}
                AccountId: !Sub ${AWS::AccountId}

Outputs:
  EventBridgeRuleStart:
    Description: Amazon EventBridge rule that executes the AWS Lambda function to START instances at the time, date and frequency defined in the rule (default time is 08:00 AM CST from Monday to Friday).
    Value: !Ref ScheduledRuleStart
  EventBridgeRuleStop:
    Description: Amazon EventBridge rule that executes the AWS Lambda function to STOP instances at the time, date and frequency defined in the rule (default time is 08:00 AM CST from Monday to Friday).
    Value: !Ref ScheduledRuleStop
  TagKey:
    Description: Tag key that indicates which instances will be scheduled for start/stop.
    Value: !Ref TagKey
  TagValue:
    Description: Tag value that indicates which instances will be scheduled for start/stop.
    Value: !Ref TagValue
  LambdaFunctionStart:
    Description: AWS Lambda function that starts tagged instances.
    Value: !Ref LambdaFunctionStart
  LambdaFunctionStop:
    Description: AWS Lambda function that stops tagged instances.
    Value: !Ref LambdaFunctionStop